"""empty message

Revision ID: 4a544282986e
Revises: 03a283bcdd4b
Create Date: 2023-10-30 13:11:59.805487

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision = '4a544282986e'
down_revision = '03a283bcdd4b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Obtenir l'inspecteur pour vérifier l'existence des tables
    conn = op.get_bind()
    inspector = inspect(conn)
    existing_tables = inspector.get_table_names()
    
    # Créer case__tags si elle n'existe pas
    if 'case__tags' not in existing_tables:
        op.create_table('case__tags',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('tag_id', sa.Integer(), nullable=True),
        sa.Column('case_id', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_case__tags_case_id', 'case__tags', ['case_id'])
        op.create_index('ix_case__tags_tag_id', 'case__tags', ['tag_id'])
        print("Table case__tags created with indexes")
    else:
        print("Table case__tags already exists")

    # Créer case__template__tags si elle n'existe pas
    if 'case__template__tags' not in existing_tables:
        op.create_table('case__template__tags',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('tag_id', sa.Integer(), nullable=True),
        sa.Column('case_id', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_case__template__tags_case_id', 'case__template__tags', ['case_id'])
        op.create_index('ix_case__template__tags_tag_id', 'case__template__tags', ['tag_id'])
        print("Table case__template__tags created with indexes")
    else:
        print("Table case__template__tags already exists")

    # Créer tags si elle n'existe pas
    if 'tags' not in existing_tables:
        op.create_table('tags',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        print("Table tags created")
    else:
        print("Table tags already exists")

    # Créer task__tags si elle n'existe pas
    if 'task__tags' not in existing_tables:
        op.create_table('task__tags',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('tag_id', sa.Integer(), nullable=True),
        sa.Column('task_id', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_task__tags_tag_id', 'task__tags', ['tag_id'])
        op.create_index('ix_task__tags_task_id', 'task__tags', ['task_id'])
        print("Table task__tags created with indexes")
    else:
        print("Table task__tags already exists")

    # Créer task__template__tags si elle n'existe pas
    if 'task__template__tags' not in existing_tables:
        op.create_table('task__template__tags',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('tag_id', sa.Integer(), nullable=True),
        sa.Column('task_id', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_task__template__tags_tag_id', 'task__template__tags', ['tag_id'])
        op.create_index('ix_task__template__tags_task_id', 'task__template__tags', ['task_id'])
        print("Table task__template__tags created with indexes")
        
        # Supprimer les colonnes taxonomies si les tables existent
        try:
            if 'case' in existing_tables:
                columns = [col['name'] for col in inspector.get_columns('case')]
                if 'taxonomies' in columns:
                    op.drop_column('case', 'taxonomies')
                    print("Dropped taxonomies column from case")
        except Exception as e:
            print(f"Error dropping taxonomies from case: {e}")

        try:
            if 'case__template' in existing_tables:
                columns = [col['name'] for col in inspector.get_columns('case__template')]
                if 'taxonomies' in columns:
                    op.drop_column('case__template', 'taxonomies')
                    print("Dropped taxonomies column from case__template")
        except Exception as e:
            print(f"Error dropping taxonomies from case__template: {e}")

        try:
            if 'task' in existing_tables:
                columns = [col['name'] for col in inspector.get_columns('task')]
                if 'taxonomies' in columns:
                    op.drop_column('task', 'taxonomies')
                    print("Dropped taxonomies column from task")
        except Exception as e:
            print(f"Error dropping taxonomies from task: {e}")

        try:
            if 'task__template' in existing_tables:
                columns = [col['name'] for col in inspector.get_columns('task__template')]
                if 'taxonomies' in columns:
                    op.drop_column('task__template', 'taxonomies')
                    print("Dropped taxonomies column from task__template")
        except Exception as e:
            print(f"Error dropping taxonomies from task__template: {e}")
    else:
        print("Table task__template__tags already exists, skipping column drops")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('task__template', schema=None) as batch_op:
        batch_op.add_column(sa.Column('taxonomies', sa.VARCHAR(), nullable=True))

    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.add_column(sa.Column('taxonomies', sa.VARCHAR(), nullable=True))

    with op.batch_alter_table('case__template', schema=None) as batch_op:
        batch_op.add_column(sa.Column('taxonomies', sa.VARCHAR(), nullable=True))

    with op.batch_alter_table('case', schema=None) as batch_op:
        batch_op.add_column(sa.Column('taxonomies', sa.VARCHAR(), nullable=True))

    with op.batch_alter_table('task__template__tags', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_task__template__tags_task_id'))
        batch_op.drop_index(batch_op.f('ix_task__template__tags_tag_id'))

    op.drop_table('task__template__tags')
    with op.batch_alter_table('task__tags', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_task__tags_task_id'))
        batch_op.drop_index(batch_op.f('ix_task__tags_tag_id'))

    op.drop_table('task__tags')
    op.drop_table('tags')
    with op.batch_alter_table('case__template__tags', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_case__template__tags_tag_id'))
        batch_op.drop_index(batch_op.f('ix_case__template__tags_case_id'))

    op.drop_table('case__template__tags')
    with op.batch_alter_table('case__tags', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_case__tags_tag_id'))
        batch_op.drop_index(batch_op.f('ix_case__tags_case_id'))

    op.drop_table('case__tags')
    # ### end Alembic commands ###
