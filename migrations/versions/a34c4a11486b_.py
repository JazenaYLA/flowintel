"""empty message

Revision ID: a34c4a11486b
Revises: 18d51c9ddccc
Create Date: 2025-03-20 08:35:49.018407

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect
from sqlalchemy.exc import OperationalError


# revision identifiers, used by Alembic.
revision = 'a34c4a11486b'
down_revision = '18d51c9ddccc'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)
    existing_columns = [col['name'] for col in inspector.get_columns('task__url__tool')]
    
    if 'name' not in existing_columns:
        op.add_column('task__url__tool', sa.Column('name', sa.String(), nullable=True))
        op.create_index('ix_task__url__tool_name', 'task__url__tool', ['name'], unique=False)
    
    connection = op.get_bind()

    tasks = connection.execute(sa.text("SELECT * FROM task__url__tool WHERE name IS NULL OR name = ''")).fetchall()
    for task_ in tasks:
        if not hasattr(task_, "url_tool") or task_.url_tool == None or not task_.url_tool:
            loc_url = sa.null()
        else:
            loc_url = task_.url_tool
        connection.execute(
            sa.text(f"update task__url__tool SET name='{loc_url}' Where id={task_.id}")
        )

    # Drop url_tool column if it exists
    if 'url_tool' in existing_columns:
        try:
            op.drop_index('ix_task__url__tool_url_tool', 'task__url__tool')
        except:
            pass
        op.drop_column('task__url__tool', 'url_tool')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)
    existing_columns = [col['name'] for col in inspector.get_columns('task__url__tool')]
    
    # Add url_tool column if it doesn't exist
    if 'url_tool' not in existing_columns:
        op.add_column('task__url__tool', sa.Column('url_tool', sa.VARCHAR(), nullable=True))
        op.create_index('ix_task__url__tool_url_tool', 'task__url__tool', ['url_tool'], unique=False)

    # Migrate data from name to url_tool
    connection = op.get_bind()
    tasks = connection.execute(sa.text("SELECT * FROM task__url__tool")).fetchall()
    for task_ in tasks:
        if not hasattr(task_, "name") or task_.name == None or not task_.name:
            loc_url = "NULL"
        else:
            loc_url = task_.name
        connection.execute(
            sa.text(f"UPDATE task__url__tool SET url_tool='{loc_url}' WHERE id={task_.id}")
        )

    # Drop name column if it exists
    if 'name' in existing_columns:
        existing_indexes = [idx['name'] for idx in inspector.get_indexes('task__url__tool')]
        if 'ix_task__url__tool_name' in existing_indexes:
            op.drop_index('ix_task__url__tool_name', table_name='task__url__tool')
        op.drop_column('task__url__tool', 'name')

    # ### end Alembic commands ###
