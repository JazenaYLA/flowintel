"""empty message

Revision ID: a34c4a11486b
Revises: 18d51c9ddccc
Create Date: 2025-03-20 08:35:49.018407

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.exc import OperationalError


# revision identifiers, used by Alembic.
revision = 'a34c4a11486b'
down_revision = '18d51c9ddccc'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        with op.batch_alter_table('task__url__tool', schema=None) as batch_op:
            batch_op.add_column(sa.Column('name', sa.String(), nullable=True))
            batch_op.create_index(batch_op.f('ix_task__url__tool_name'), ['name'], unique=False)
    except OperationalError:
        print("Column 'name' already changed in 'task__url__tool'")
    
    connection = op.get_bind()

    tasks = connection.execute(sa.text("SELECT * FROM 'task__url__tool'")).fetchall()
    for task_ in tasks:
        if task_.url_tool == None:
            loc_url = sa.null()
        else:
            loc_url = task_.url_tool
        connection.execute(
            sa.text(f"update task__url__tool SET name={loc_url} Where id={task_.id}")
        )

    try:
        with op.batch_alter_table('task__url__tool', schema=None) as batch_op:
            batch_op.drop_index('ix_task__url__tool_url_tool')
            batch_op.drop_column('url_tool')
    except OperationalError:
        print("Column 'url_tool' already dropped in 'task__url__tool'")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        with op.batch_alter_table('task__url__tool', schema=None) as batch_op:
            batch_op.add_column(sa.Column('url_tool', sa.VARCHAR(), nullable=True))
            batch_op.create_index('ix_task__url__tool_url_tool', ['url_tool'], unique=False)
    except OperationalError:
        print("Column 'name' already exist in 'task__url__tool'")

    connection = op.get_bind()
    tasks = connection.execute(sa.text("SELECT * FROM 'task__url__tool'")).fetchall()
    for task_ in tasks:
        if task_.name == None:
            loc_url = sa.null()
        else:
            loc_url = task_.name
        connection.execute(
            sa.text(f"update task__url__tool SET url_tool={loc_url} Where id={task_.id}")
        )

    try:
        with op.batch_alter_table('task__url__tool', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_task__url__tool_name'))
            batch_op.drop_column('name')
    except OperationalError:
        print("Column 'name' already exist in 'task__url__tool'")

    # ### end Alembic commands ###
