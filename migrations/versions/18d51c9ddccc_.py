"""empty message

Revision ID: 18d51c9ddccc
Revises: 77984d64c89e
Create Date: 2025-03-19 16:03:09.309580

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect
from sqlalchemy.exc import OperationalError


# revision identifiers, used by Alembic.
revision = '18d51c9ddccc'
down_revision = '77984d64c89e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)
    existing_tables = inspector.get_table_names()
    
    # Create task__url__tool table
    if 'task__url__tool' not in existing_tables:
        op.create_table('task__url__tool',
            sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
            sa.Column('task_id', sa.Integer(), nullable=True),
            sa.Column('url_tool', sa.String(), nullable=True),
            sa.ForeignKeyConstraint(['task_id'], ['task.id'], ondelete='CASCADE'),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_task__url__tool_url_tool', 'task__url__tool', ['url_tool'], unique=False)


    connection = op.get_bind()
    insp = sa.inspect(connection)
    
    # Check if task__url__tool table exists and if task.url column exists
    if 'task__url__tool' in existing_tables:
        task_columns = [col['name'] for col in inspector.get_columns('task')]
        flag = 'url' in task_columns
        
        # Only proceed if both table exists and we have data to migrate
        if flag:
            tasks = connection.execute(sa.text("SELECT * FROM task")).fetchall()
            for task_ in tasks:
                if not task_.url or task_.url == None:
                    loc_url = "NULL"
                else:
                    loc_url = task_.url
                # Use safer INSERT with proper NULL handling
                connection.execute(
                    sa.text(f"INSERT INTO task__url__tool (task_id, url_tool) VALUES ({task_.id}, CASE WHEN '{loc_url}' = 'NULL' THEN NULL ELSE '{loc_url}' END)")
                )

    # Drop url column from task table if it exists
    task_columns = [col['name'] for col in inspector.get_columns('task')]
    if 'url' in task_columns:
        try:
            op.drop_index('ix_task_url', 'task')
        except:
            pass
        op.drop_column('task', 'url')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)
    existing_tables = inspector.get_table_names()
    
    # Add url column to task if it doesn't exist
    task_columns = [col['name'] for col in inspector.get_columns('task')]
    if 'url' not in task_columns:
        op.add_column('task', sa.Column('url', sa.VARCHAR(), nullable=True))
        op.create_index('ix_task_url', 'task', ['url'], unique=False)

    # Migrate data from task__url__tool to task.url
    if 'task__url__tool' in existing_tables:
        connection = op.get_bind()
        tasks_url_tool = connection.execute(sa.text("SELECT * FROM task__url__tool")).fetchall()
        for task_ in tasks_url_tool:
            if task_.url_tool == None or not task_.url_tool:
                loc_url = "NULL"
            else:
                loc_url = task_.url_tool
            connection.execute(
                sa.text(f"UPDATE task SET url='{loc_url}' WHERE id={task_.task_id}")
            )

        # Drop task__url__tool table
        task_url_indexes = [idx['name'] for idx in inspector.get_indexes('task__url__tool')]
        if 'ix_task__url__tool_url_tool' in task_url_indexes:
            op.drop_index('ix_task__url__tool_url_tool', table_name='task__url__tool')
        op.drop_table('task__url__tool')

    # ### end Alembic commands ###
