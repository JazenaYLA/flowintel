"""empty message

Revision ID: b34064d1a92c
Revises: b0768fec36b7
Create Date: 2024-09-10 11:06:28.378991

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision = 'b34064d1a92c'
down_revision = 'b0768fec36b7'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Obtenir l'inspecteur pour vérifier l'existence des tables
    conn = op.get_bind()
    inspector = inspect(conn)
    existing_tables = inspector.get_table_names()
    
    # Créer case__misp__object si elle n'existe pas
    if 'case__misp__object' not in existing_tables:
        op.create_table('case__misp__object',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('case_id', sa.Integer(), nullable=False),
        sa.Column('template_uuid', sa.String(length=36), nullable=True),
        sa.Column('name', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_case__misp__object_case_id', 'case__misp__object', ['case_id'])
        op.create_index('ix_case__misp__object_template_uuid', 'case__misp__object', ['template_uuid'])
        print("Table case__misp__object created with indexes")
    else:
        print("Table case__misp__object already exists")

    # Créer case__misp__object__connector__instance si elle n'existe pas
    if 'case__misp__object__connector__instance' not in existing_tables:
        op.create_table('case__misp__object__connector__instance',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('case_id', sa.Integer(), nullable=True),
        sa.Column('instance_id', sa.Integer(), nullable=True),
        sa.Column('identifier', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_case__misp__object__connector__instance_case_id', 'case__misp__object__connector__instance', ['case_id'])
        op.create_index('ix_case__misp__object__connector__instance_instance_id', 'case__misp__object__connector__instance', ['instance_id'])
        print("Table case__misp__object__connector__instance created with indexes")
    else:
        print("Table case__misp__object__connector__instance already exists")

    # Créer misp__attribute si elle n'existe pas
    if 'misp__attribute' not in existing_tables:
        op.create_table('misp__attribute',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('case_misp_object_id', sa.Integer(), nullable=True),
        sa.Column('value', sa.String(), nullable=True),
        sa.Column('type', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['case_misp_object_id'], ['case__misp__object.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_misp__attribute_type', 'misp__attribute', ['type'])
        op.create_index('ix_misp__attribute_value', 'misp__attribute', ['value'])
        print("Table misp__attribute created with indexes")
    else:
        print("Table misp__attribute already exists")

    # Créer misp__object__instance__uuid si elle n'existe pas
    if 'misp__object__instance__uuid' not in existing_tables:
        op.create_table('misp__object__instance__uuid',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('instance_id', sa.Integer(), nullable=True),
        sa.Column('misp_object_id', sa.Integer(), nullable=True),
        sa.Column('object_instance_uuid', sa.String(length=36), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_misp__object__instance__uuid_instance_id', 'misp__object__instance__uuid', ['instance_id'])
        op.create_index('ix_misp__object__instance__uuid_misp_object_id', 'misp__object__instance__uuid', ['misp_object_id'])
        op.create_index('ix_misp__object__instance__uuid_object_instance_uuid', 'misp__object__instance__uuid', ['object_instance_uuid'])
        print("Table misp__object__instance__uuid created with indexes")
    else:
        print("Table misp__object__instance__uuid already exists")

    # Créer misp__attribute__instance__uuid si elle n'existe pas
    if 'misp__attribute__instance__uuid' not in existing_tables:
        op.create_table('misp__attribute__instance__uuid',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('instance_id', sa.Integer(), nullable=True),
        sa.Column('misp_attribute_id', sa.Integer(), nullable=True),
        sa.Column('attribute_instance_uuid', sa.String(length=36), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_misp__attribute__instance__uuid_instance_id', 'misp__attribute__instance__uuid', ['instance_id'])
        op.create_index('ix_misp__attribute__instance__uuid_misp_attribute_id', 'misp__attribute__instance__uuid', ['misp_attribute_id'])
        op.create_index('ix_misp__attribute__instance__uuid_attribute_instance_uuid', 'misp__attribute__instance__uuid', ['attribute_instance_uuid'])
        print("Table misp__attribute__instance__uuid created with indexes")
    else:
        print("Table misp__attribute__instance__uuid already exists")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = inspect(conn)
    existing_tables = inspector.get_table_names()
    
    # Drop misp__attribute table and its indexes
    if 'misp__attribute' in existing_tables:
        misp_attr_indexes = [idx['name'] for idx in inspector.get_indexes('misp__attribute')]
        if 'ix_misp__attribute_value' in misp_attr_indexes:
            op.drop_index('ix_misp__attribute_value', table_name='misp__attribute')
        if 'ix_misp__attribute_type' in misp_attr_indexes:
            op.drop_index('ix_misp__attribute_type', table_name='misp__attribute')
        op.drop_table('misp__attribute')

    # Drop case__misp__object__connector__instance table and its indexes
    if 'case__misp__object__connector__instance' in existing_tables:
        case_connector_indexes = [idx['name'] for idx in inspector.get_indexes('case__misp__object__connector__instance')]
        if 'ix_case__misp__object__connector__instance_instance_id' in case_connector_indexes:
            op.drop_index('ix_case__misp__object__connector__instance_instance_id', table_name='case__misp__object__connector__instance')
        if 'ix_case__misp__object__connector__instance_case_id' in case_connector_indexes:
            op.drop_index('ix_case__misp__object__connector__instance_case_id', table_name='case__misp__object__connector__instance')
        op.drop_table('case__misp__object__connector__instance')

    # Drop case__misp__object table and its indexes
    if 'case__misp__object' in existing_tables:
        case_misp_indexes = [idx['name'] for idx in inspector.get_indexes('case__misp__object')]
        if 'ix_case__misp__object_template_uuid' in case_misp_indexes:
            op.drop_index('ix_case__misp__object_template_uuid', table_name='case__misp__object')
        if 'ix_case__misp__object_case_id' in case_misp_indexes:
            op.drop_index('ix_case__misp__object_case_id', table_name='case__misp__object')
        op.drop_table('case__misp__object')
    
    # Drop misp__object__instance__uuid table and its indexes
    if 'misp__object__instance__uuid' in existing_tables:
        misp_obj_indexes = [idx['name'] for idx in inspector.get_indexes('misp__object__instance__uuid')]
        if 'ix_misp__object__instance__uuid_instance_id' in misp_obj_indexes:
            op.drop_index('ix_misp__object__instance__uuid_instance_id', table_name='misp__object__instance__uuid')
        if 'ix_misp__object__instance__uuid_misp_object_id' in misp_obj_indexes:
            op.drop_index('ix_misp__object__instance__uuid_misp_object_id', table_name='misp__object__instance__uuid')
        if 'ix_misp__object__instance__uuid_object_instance_uuid' in misp_obj_indexes:
            op.drop_index('ix_misp__object__instance__uuid_object_instance_uuid', table_name='misp__object__instance__uuid')
        op.drop_table('misp__object__instance__uuid')

    # Drop misp__attribute__instance__uuid table and its indexes
    if 'misp__attribute__instance__uuid' in existing_tables:
        misp_attr_inst_indexes = [idx['name'] for idx in inspector.get_indexes('misp__attribute__instance__uuid')]
        if 'ix_misp__attribute__instance__uuid_instance_id' in misp_attr_inst_indexes:
            op.drop_index('ix_misp__attribute__instance__uuid_instance_id', table_name='misp__attribute__instance__uuid')
        if 'ix_misp__attribute__instance__uuid_misp_attribute_id' in misp_attr_inst_indexes:
            op.drop_index('ix_misp__attribute__instance__uuid_misp_attribute_id', table_name='misp__attribute__instance__uuid')
        if 'ix_misp__attribute__instance__uuid_attribute_instance_uuid' in misp_attr_inst_indexes:
            op.drop_index('ix_misp__attribute__instance__uuid_attribute_instance_uuid', table_name='misp__attribute__instance__uuid')
        op.drop_table('misp__attribute__instance__uuid')
    # ### end Alembic commands ###
