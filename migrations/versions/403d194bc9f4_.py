"""empty message

Revision ID: 403d194bc9f4
Revises: 3042fb8e5c84
Create Date: 2024-03-12 10:50:02.525931

"""
import uuid
from alembic import op
import sqlalchemy as sa
from sqlalchemy import orm
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer
from sqlalchemy import inspect

Base = declarative_base()


# revision identifiers, used by Alembic.
revision = '403d194bc9f4'
down_revision = '3042fb8e5c84'
branch_labels = None
depends_on = None

class Task(Base):
    __tablename__ = 'task'
    id = sa.Column(sa.Integer, primary_key=True, autoincrement=True)
    notes = sa.Column(sa.String, nullable=True)

class Note(Base):
    __tablename__ = 'note'
    id = sa.Column(sa.Integer, primary_key=True, autoincrement=True)
    uuid = sa.Column(sa.String(length=36), nullable=True)
    note = sa.Column(sa.String(), nullable=True)
    task_id = sa.Column(sa.Integer(), nullable=True)
    task_order_id = sa.Column(sa.Integer(), nullable=True)

accounts_table = table(
    "note",
    column("id", Integer),
    column("task_id", Integer),
    column("task_order_id", Integer),
    column("uuid", String),
    column("note", String),
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)
    existing_tables = inspector.get_table_names()
    
    # Create note table
    if 'note' not in existing_tables:
        op.create_table('note',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('uuid', sa.String(length=36), nullable=True),
        sa.Column('note', sa.String(), nullable=True),
        sa.Column('task_id', sa.Integer(), nullable=True),
        sa.Column('task_order_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['task_id'], ['task.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_note_task_order_id', 'note', ['task_order_id'], unique=False)
        op.create_index('ix_note_uuid', 'note', ['uuid'], unique=False)

    # Migrate notes from task to note table
    task_columns = [col['name'] for col in inspector.get_columns('task')]
    if 'notes' in task_columns:
        try:
            session = orm.Session(bind=bind)

            notes = list()
            for task in session.query(Task):
                if task.notes:
                    loc = dict()
                    loc["note"] = task.notes
                    loc["task_id"] = task.id
                    loc["task_order_id"] = 1
                    loc["uuid"] = str(uuid.uuid4())
                    notes.append(loc)

            op.bulk_insert(
                accounts_table,
                notes
            )
        except Exception:
            print("Error migrating notes or already migrated")

        # Drop notes column from task
        op.drop_column('task', 'notes')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = orm.Session(bind=bind)
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.VARCHAR(), nullable=True))

    for note in session.query(Note):
        task = session.query(Task).where(Task.id==note.task_id)
        task.notes = note.notes
        session.commit()

    with op.batch_alter_table('note', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_note_uuid'))
        batch_op.drop_index(batch_op.f('ix_note_task_order_id'))

    op.drop_table('note')
    # ### end Alembic commands ###
