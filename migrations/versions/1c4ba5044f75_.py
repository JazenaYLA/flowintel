"""empty message

Revision ID: 1c4ba5044f75
Revises: feb2de203a6b
Create Date: 2023-12-04 15:24:00.557627

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision = '1c4ba5044f75'
down_revision = 'feb2de203a6b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Check what exists before making changes
    bind = op.get_bind()
    inspector = inspect(bind)
    existing_tables = inspector.get_table_names()
    
    # Create user__connector__instance table if it doesn't exist
    if 'user__connector__instance' not in existing_tables:
        op.create_table('user__connector__instance',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('instance_id', sa.Integer(), nullable=True),
        sa.Column('api_key', sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_user__connector__instance_api_key', 'user__connector__instance', ['api_key'], unique=False)
        op.create_index('ix_user__connector__instance_instance_id', 'user__connector__instance', ['instance_id'], unique=False)
        op.create_index('ix_user__connector__instance_user_id', 'user__connector__instance', ['user_id'], unique=False)
    else:
        print("Table 'user__connector__instance' already exists")

    # Create connector__instance table if it doesn't exist
    if 'connector__instance' not in existing_tables:
        op.create_table('connector__instance',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=64), nullable=True),
        sa.Column('url', sa.String(length=64), nullable=True),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('uuid', sa.String(length=36), nullable=True),
        sa.Column('connector_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['connector_id'], ['connector.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_connector__instance_name', 'connector__instance', ['name'], unique=False)
        op.create_index('ix_connector__instance_url', 'connector__instance', ['url'], unique=False)
        op.create_index('ix_connector__instance_uuid', 'connector__instance', ['uuid'], unique=False)
    else:
        print("Table 'connector__instance' already exists")

    # Drop url column from connector table if it exists
    if 'connector' in existing_tables:
        connector_columns = [col['name'] for col in inspector.get_columns('connector')]
        if 'url' in connector_columns:
            # Drop index first if it exists
            try:
                op.drop_index('ix_connector_url', 'connector')
            except:
                pass
            op.drop_column('connector', 'url')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('connector', schema=None) as batch_op:
        batch_op.add_column(sa.Column('url', sa.VARCHAR(length=64), nullable=True))
        batch_op.create_index('ix_connector_url', ['url'], unique=False)

    with op.batch_alter_table('connector__instance', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_connector__instance_uuid'))
        batch_op.drop_index(batch_op.f('ix_connector__instance_url'))
        batch_op.drop_index(batch_op.f('ix_connector__instance_name'))

    op.drop_table('connector__instance')
    with op.batch_alter_table('user__connector__instance', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user__connector__instance_user_id'))
        batch_op.drop_index(batch_op.f('ix_user__connector__instance_instance_id'))
        batch_op.drop_index(batch_op.f('ix_user__connector__instance_api_key'))

    op.drop_table('user__connector__instance')
    # ### end Alembic commands ###
