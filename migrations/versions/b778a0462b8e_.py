"""empty message

Revision ID: b778a0462b8e
Revises: fc317cf65aa3
Create Date: 2025-03-27 08:59:06.078610

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect
from sqlalchemy.exc import OperationalError


# revision identifiers, used by Alembic.
revision = 'b778a0462b8e'
down_revision = 'fc317cf65aa3'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Check what exists before making changes
    bind = op.get_bind()
    inspector = inspect(bind)
    existing_tables = inspector.get_table_names()
    
    # Create configurable__fields table
    if 'configurable__fields' not in existing_tables:
        op.create_table('configurable__fields',
            sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
            sa.Column('name', sa.String(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_configurable__fields_name', 'configurable__fields', ['name'], unique=True)

    # Create misp__module table
    if 'misp__module' not in existing_tables:
        op.create_table('misp__module',
            sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
            sa.Column('name', sa.String(), nullable=True),
            sa.Column('description', sa.String(), nullable=True),
            sa.Column('input_attr', sa.String(), nullable=True),
            sa.Column('version', sa.String(length=15), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_misp__module_name', 'misp__module', ['name'], unique=True)

    # Create misp__module__config table
    if 'misp__module__config' not in existing_tables:
        op.create_table('misp__module__config',
            sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
            sa.Column('module_id', sa.Integer(), nullable=True),
            sa.Column('config_id', sa.Integer(), nullable=True),
            sa.Column('value', sa.String(), nullable=True),
            sa.Column('user_id', sa.Integer(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_misp__module__config_config_id', 'misp__module__config', ['config_id'], unique=False)
        op.create_index('ix_misp__module__config_module_id', 'misp__module__config', ['module_id'], unique=False)
        op.create_index('ix_misp__module__config_user_id', 'misp__module__config', ['user_id'], unique=False)
        op.create_index('ix_misp__module__config_value', 'misp__module__config', ['value'], unique=False)

    # Create misp__module__result table
    if 'misp__module__result' not in existing_tables:
        op.create_table('misp__module__result',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('uuid', sa.String(length=36), nullable=True),
        sa.Column('modules_list', sa.String(), nullable=True),
        sa.Column('query_enter', sa.String(), nullable=True),
        sa.Column('input_query', sa.String(), nullable=True),
        sa.Column('result', sa.String(), nullable=True),
        sa.Column('nb_errors', sa.Integer(), nullable=True),
        sa.Column('query_date', sa.DateTime(), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_misp__module__result_nb_errors', 'misp__module__result', ['nb_errors'], unique=False)
        op.create_index('ix_misp__module__result_query_date', 'misp__module__result', ['query_date'], unique=False)
        op.create_index('ix_misp__module__result_user_id', 'misp__module__result', ['user_id'], unique=False)
        op.create_index('ix_misp__module__result_uuid', 'misp__module__result', ['uuid'], unique=True)

    # Drop analyzer table if it exists
    if 'analyzer' in existing_tables:
        # Drop indexes first if they exist
        try:
            op.drop_index('ix_analyzer_name', 'analyzer')
        except:
            pass
        try:
            op.drop_index('ix_analyzer_url', 'analyzer')
        except:
            pass
        op.drop_table('analyzer')

    # Drop analyzer__result table if it exists
    if 'analyzer__result' in existing_tables:
        # Drop indexes first if they exist
        try:
            op.drop_index('ix_analyzer__result_origin_url', 'analyzer__result')
        except:
            pass
        try:
            op.drop_index('ix_analyzer__result_request_date', 'analyzer__result')
        except:
            pass
        try:
            op.drop_index('ix_analyzer__result_user_id', 'analyzer__result')
        except:
            pass
        op.drop_table('analyzer__result')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)
    existing_tables = inspector.get_table_names()
    
    # Recreate analyzer__result table if it doesn't exist
    if 'analyzer__result' not in existing_tables:
        op.create_table('analyzer__result',
            sa.Column('id', sa.INTEGER(), nullable=False),
            sa.Column('origin_url', sa.VARCHAR(), nullable=True),
            sa.Column('is_pending', sa.BOOLEAN(), nullable=True),
            sa.Column('request_date', sa.DATETIME(), nullable=True),
            sa.Column('result', sa.VARCHAR(), nullable=True),
            sa.Column('user_id', sa.INTEGER(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_analyzer__result_user_id', 'analyzer__result', ['user_id'], unique=False)
        op.create_index('ix_analyzer__result_request_date', 'analyzer__result', ['request_date'], unique=False)
        op.create_index('ix_analyzer__result_origin_url', 'analyzer__result', ['origin_url'], unique=False)

    # Recreate analyzer table if it doesn't exist
    if 'analyzer' not in existing_tables:
        op.create_table('analyzer',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('name', sa.VARCHAR(length=64), nullable=True),
        sa.Column('url', sa.VARCHAR(), nullable=True),
        sa.Column('is_active', sa.BOOLEAN(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_analyzer_url', 'analyzer', ['url'], unique=False)
        op.create_index('ix_analyzer_name', 'analyzer', ['name'], unique=True)

    # Drop misp__module__result table if it exists
    if 'misp__module__result' in existing_tables:
        misp_result_indexes = [idx['name'] for idx in inspector.get_indexes('misp__module__result')]
        if 'ix_misp__module__result_uuid' in misp_result_indexes:
            op.drop_index('ix_misp__module__result_uuid', table_name='misp__module__result')
        if 'ix_misp__module__result_user_id' in misp_result_indexes:
            op.drop_index('ix_misp__module__result_user_id', table_name='misp__module__result')
        if 'ix_misp__module__result_query_date' in misp_result_indexes:
            op.drop_index('ix_misp__module__result_query_date', table_name='misp__module__result')
        if 'ix_misp__module__result_nb_errors' in misp_result_indexes:
            op.drop_index('ix_misp__module__result_nb_errors', table_name='misp__module__result')
        op.drop_table('misp__module__result')

    # Drop misp__module__config table if it exists
    if 'misp__module__config' in existing_tables:
        misp_config_indexes = [idx['name'] for idx in inspector.get_indexes('misp__module__config')]
        if 'ix_misp__module__config_value' in misp_config_indexes:
            op.drop_index('ix_misp__module__config_value', table_name='misp__module__config')
        if 'ix_misp__module__config_user_id' in misp_config_indexes:
            op.drop_index('ix_misp__module__config_user_id', table_name='misp__module__config')
        if 'ix_misp__module__config_module_id' in misp_config_indexes:
            op.drop_index('ix_misp__module__config_module_id', table_name='misp__module__config')
        if 'ix_misp__module__config_config_id' in misp_config_indexes:
            op.drop_index('ix_misp__module__config_config_id', table_name='misp__module__config')
        op.drop_table('misp__module__config')

    # Drop misp__module table if it exists
    if 'misp__module' in existing_tables:
        misp_module_indexes = [idx['name'] for idx in inspector.get_indexes('misp__module')]
        if 'ix_misp__module_name' in misp_module_indexes:
            op.drop_index('ix_misp__module_name', table_name='misp__module')
        op.drop_table('misp__module')

    # Drop configurable__fields table if it exists
    if 'configurable__fields' in existing_tables:
        config_indexes = [idx['name'] for idx in inspector.get_indexes('configurable__fields')]
        if 'ix_configurable__fields_name' in config_indexes:
            op.drop_index('ix_configurable__fields_name', table_name='configurable__fields')
        op.drop_table('configurable__fields')
    # ### end Alembic commands ###
