"""empty message

Revision ID: b778a0462b8e
Revises: fc317cf65aa3
Create Date: 2025-03-27 08:59:06.078610

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.exc import OperationalError


# revision identifiers, used by Alembic.
revision = 'b778a0462b8e'
down_revision = 'fc317cf65aa3'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        op.create_table('configurable__fields',
            sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
            sa.Column('name', sa.String(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('configurable__fields', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_configurable__fields_name'), ['name'], unique=True)
    except OperationalError:
        print("Table Configurable_fields already exist")

    try:
        op.create_table('misp__module',
            sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
            sa.Column('name', sa.String(), nullable=True),
            sa.Column('description', sa.String(), nullable=True),
            sa.Column('input_attr', sa.String(), nullable=True),
            sa.Column('version', sa.String(length=15), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('misp__module', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_misp__module_name'), ['name'], unique=True)
    except OperationalError:
        print("Table Misp_Module already exist")

    try:
        op.create_table('misp__module__config',
            sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
            sa.Column('module_id', sa.Integer(), nullable=True),
            sa.Column('config_id', sa.Integer(), nullable=True),
            sa.Column('value', sa.String(), nullable=True),
            sa.Column('user_id', sa.Integer(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('misp__module__config', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_misp__module__config_config_id'), ['config_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_misp__module__config_module_id'), ['module_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_misp__module__config_user_id'), ['user_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_misp__module__config_value'), ['value'], unique=False)
    except OperationalError:
        print("Table Misp_Module_config already exist")

    try:
        op.create_table('misp__module__result',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('uuid', sa.String(length=36), nullable=True),
        sa.Column('modules_list', sa.String(), nullable=True),
        sa.Column('query_enter', sa.String(), nullable=True),
        sa.Column('input_query', sa.String(), nullable=True),
        sa.Column('result', sa.String(), nullable=True),
        sa.Column('nb_errors', sa.Integer(), nullable=True),
        sa.Column('query_date', sa.DateTime(), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('misp__module__result', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_misp__module__result_nb_errors'), ['nb_errors'], unique=False)
            batch_op.create_index(batch_op.f('ix_misp__module__result_query_date'), ['query_date'], unique=False)
            batch_op.create_index(batch_op.f('ix_misp__module__result_user_id'), ['user_id'], unique=False)
            batch_op.create_index(batch_op.f('ix_misp__module__result_uuid'), ['uuid'], unique=True)
    except OperationalError:
        print("Table Misp_Module_result already exist")

    try:
        with op.batch_alter_table('analyzer', schema=None) as batch_op:
            batch_op.drop_index('ix_analyzer_name')
            batch_op.drop_index('ix_analyzer_url')

        op.drop_table('analyzer')
    except OperationalError:
        print("Table Analyzer already dropped")

    try:
        with op.batch_alter_table('analyzer__result', schema=None) as batch_op:
            batch_op.drop_index('ix_analyzer__result_origin_url')
            batch_op.drop_index('ix_analyzer__result_request_date')
            batch_op.drop_index('ix_analyzer__result_user_id')

        op.drop_table('analyzer__result')
    except OperationalError:
        print("Table Analyzer_result already dropped")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        op.create_table('analyzer__result',
            sa.Column('id', sa.INTEGER(), nullable=False),
            sa.Column('origin_url', sa.VARCHAR(), nullable=True),
            sa.Column('is_pending', sa.BOOLEAN(), nullable=True),
            sa.Column('request_date', sa.DATETIME(), nullable=True),
            sa.Column('result', sa.VARCHAR(), nullable=True),
            sa.Column('user_id', sa.INTEGER(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('analyzer__result', schema=None) as batch_op:
            batch_op.create_index('ix_analyzer__result_user_id', ['user_id'], unique=False)
            batch_op.create_index('ix_analyzer__result_request_date', ['request_date'], unique=False)
            batch_op.create_index('ix_analyzer__result_origin_url', ['origin_url'], unique=False)
    except OperationalError:
        print("Table Analyzer_result already exist")

    try:
        op.create_table('analyzer',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('name', sa.VARCHAR(length=64), nullable=True),
        sa.Column('url', sa.VARCHAR(), nullable=True),
        sa.Column('is_active', sa.BOOLEAN(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('analyzer', schema=None) as batch_op:
            batch_op.create_index('ix_analyzer_url', ['url'], unique=False)
            batch_op.create_index('ix_analyzer_name', ['name'], unique=1)
    except OperationalError:
        print("Table Analyzer already exist")

    try:
        with op.batch_alter_table('misp__module__result', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_misp__module__result_uuid'))
            batch_op.drop_index(batch_op.f('ix_misp__module__result_user_id'))
            batch_op.drop_index(batch_op.f('ix_misp__module__result_query_date'))
            batch_op.drop_index(batch_op.f('ix_misp__module__result_nb_errors'))

        op.drop_table('misp__module__result')
    except OperationalError:
        print("Table misp__module__result already dropped")

    try:
        with op.batch_alter_table('misp__module__config', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_misp__module__config_value'))
            batch_op.drop_index(batch_op.f('ix_misp__module__config_user_id'))
            batch_op.drop_index(batch_op.f('ix_misp__module__config_module_id'))
            batch_op.drop_index(batch_op.f('ix_misp__module__config_config_id'))

        op.drop_table('misp__module__config')
    except OperationalError:
        print("Table misp__module__config already dropped")

    try:
        with op.batch_alter_table('misp__module', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_misp__module_name'))

        op.drop_table('misp__module')
    except OperationalError:
        print("Table misp__module already dropped")

    try:
        with op.batch_alter_table('configurable__fields', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_configurable__fields_name'))

        op.drop_table('configurable__fields')
    except OperationalError:
        print("Table configurable__fields already dropped")
    # ### end Alembic commands ###
