"""empty message

Revision ID: 0fc6982b9493
Revises: 403d194bc9f4
Create Date: 2024-03-13 13:38:14.030482

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.exc import OperationalError


# revision identifiers, used by Alembic.
revision = '0fc6982b9493'
down_revision = '403d194bc9f4'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        with op.batch_alter_table('task', schema=None) as batch_op:
            batch_op.add_column(sa.Column('nb_notes', sa.Integer(), nullable=True))
            batch_op.create_index(batch_op.f('ix_task_nb_notes'), ['nb_notes'], unique=False)
    except OperationalError:
        print("Column 'nb_notes' already exist in 'task'")

    connection = op.get_bind()

	# Sélectionnez toutes les lignes de la table users
    tasks = connection.execute(sa.text("SELECT id FROM 'task'")).fetchall()

    # Incrémentation du compteur pour chaque utilisateur
    for task in tasks:
        cp_notes = 0
        notes = connection.execute(sa.text(f"SELECT id FROM note WHERE note.task_id={task.id}")).fetchall()
        cp = 1
        for note in notes:
            connection.execute(
                sa.text(f"UPDATE note SET task_order_id = {cp} WHERE id = {note.id}")
            )
            cp += 1
            cp_notes += 1
			
        connection.execute(
			sa.text(f"UPDATE 'task' SET nb_notes = {cp_notes} WHERE id = {task.id}")
		)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_task_nb_notes'))
        batch_op.drop_column('nb_notes')

    # ### end Alembic commands ###
