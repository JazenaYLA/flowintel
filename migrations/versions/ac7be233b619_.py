"""empty message

Revision ID: ac7be233b619
Revises: 6c71bd3c10d8
Create Date: 2023-08-17 15:25:08.253145

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect
from sqlalchemy.exc import OperationalError, ProgrammingError


# revision identifiers, used by Alembic.
revision = 'ac7be233b619'
down_revision = '6c71bd3c10d8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Vérifier si la table existe déjà
    conn = op.get_bind()
    inspector = inspect(conn)
    existing_tables = inspector.get_table_names()
    
    if 'recurring__notification' not in existing_tables:
        # La table n'existe pas, on peut la créer
        op.create_table('recurring__notification',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('case_id', sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        print("Table recurring__notification created successfully")
        
        # Créer les index
        op.create_index('ix_recurring__notification_case_id', 'recurring__notification', ['case_id'])
        op.create_index('ix_recurring__notification_user_id', 'recurring__notification', ['user_id'])
        print("Indexes created successfully")
    else:
        print("Table recurring__notification already exists, skipping creation")
        
        # Vérifier si les index existent déjà
        existing_indexes = inspector.get_indexes('recurring__notification')
        index_names = [idx['name'] for idx in existing_indexes]
        
        if 'ix_recurring__notification_case_id' not in index_names:
            try:
                op.create_index('ix_recurring__notification_case_id', 'recurring__notification', ['case_id'])
                print("Index ix_recurring__notification_case_id created")
            except (OperationalError, ProgrammingError) as e:
                print(f"Error creating case_id index: {e}")
        
        if 'ix_recurring__notification_user_id' not in index_names:
            try:
                op.create_index('ix_recurring__notification_user_id', 'recurring__notification', ['user_id'])
                print("Index ix_recurring__notification_user_id created")
            except (OperationalError, ProgrammingError) as e:
                print(f"Error creating user_id index: {e}")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('recurring__notification', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_recurring__notification_user_id'))
        batch_op.drop_index(batch_op.f('ix_recurring__notification_case_id'))

    op.drop_table('recurring__notification')
    # ### end Alembic commands ###
