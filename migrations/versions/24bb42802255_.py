"""empty message

Revision ID: 24bb42802255
Revises: b778a0462b8e
Create Date: 2025-04-01 15:49:20.267559

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect
from sqlalchemy.exc import OperationalError


# revision identifiers, used by Alembic.
revision = '24bb42802255'
down_revision = 'b778a0462b8e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)
    
    # Handle tags table
    tags_columns = [col['name'] for col in inspector.get_columns('tags')]
    if 'uuid' not in tags_columns:
        op.add_column('tags', sa.Column('uuid', sa.String(length=36), nullable=True))
        op.create_index('ix_tags_uuid', 'tags', ['uuid'], unique=False)
    
    if 'cluster_id' in tags_columns:
        foreign_keys = inspector.get_foreign_keys('tags')
        for fk in foreign_keys:
            if fk['constrained_columns'] == ['cluster_id']:
                op.drop_constraint(fk['name'], 'tags', type_='foreignkey')
                break
        op.drop_column('tags', 'cluster_id')
    
    # Handle taxonomy table  
    taxonomy_columns = [col['name'] for col in inspector.get_columns('taxonomy')]
    if 'uuid' not in taxonomy_columns:
        op.add_column('taxonomy', sa.Column('uuid', sa.String(length=36), nullable=True))
        op.create_index('ix_taxonomy_uuid', 'taxonomy', ['uuid'], unique=False)
    if 'version' not in taxonomy_columns:
        op.add_column('taxonomy', sa.Column('version', sa.String(length=15), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    inspector = inspect(bind)
    
    # Revert taxonomy table
    taxonomy_columns = [col['name'] for col in inspector.get_columns('taxonomy')]
    taxonomy_indexes = [idx['name'] for idx in inspector.get_indexes('taxonomy')]
    if 'ix_taxonomy_uuid' in taxonomy_indexes:
        op.drop_index('ix_taxonomy_uuid', table_name='taxonomy')
    if 'version' in taxonomy_columns:
        op.drop_column('taxonomy', 'version')
    if 'uuid' in taxonomy_columns:
        op.drop_column('taxonomy', 'uuid')

    # Revert tags table
    tags_columns = [col['name'] for col in inspector.get_columns('tags')]
    tags_indexes = [idx['name'] for idx in inspector.get_indexes('tags')]
    
    if 'cluster_id' not in tags_columns:
        op.add_column('tags', sa.Column('cluster_id', sa.INTEGER(), nullable=True))
        op.create_foreign_key('fk_tags_cluster_id_cluster', 'tags', 'cluster', ['cluster_id'], ['id'], ondelete='CASCADE')
    if 'ix_tags_uuid' in tags_indexes:
        op.drop_index('ix_tags_uuid', table_name='tags')
    if 'uuid' in tags_columns:
        op.drop_column('tags', 'uuid')

    # ### end Alembic commands ###
